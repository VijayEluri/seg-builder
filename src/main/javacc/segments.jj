options {
  STATIC=false;
}

PARSER_BEGIN(SegmentDefinitionParser)

package com.vse.segments.parser;

import java.util.*;
import java.io.*;

public class SegmentDefinitionParser {

	public static void main (String args[]) throws Exception {
		String inputFileName = null;
		File cppOutputPath = null;
		File javaOutputPath = new File (".");

		for (int i=0; i<args.length; i++) {
			if (args[i].equals("-javaOut") && i+1<args.length) {
				javaOutputPath = new File(args[++i]);
				continue;
			}

			if (args[i].equals("-cppOut") && i+1<args.length) {
				cppOutputPath = new File(args[++i]);
				continue;
			}

			if (inputFileName != null)
				throw new IllegalArgumentException("Invalid parameter: "+args[i]);
  
			inputFileName = args[i];
		}

		if (inputFileName == null)
			throw new IllegalArgumentException("Missing input file");

		try {
			SegmentDefinitionParser parser = new SegmentDefinitionParser(
				new FileInputStream(inputFileName));

			BuildRegistry registry = new BuildRegistry();
			parser.run(new ParseContext(registry));
	
			Iterator<String> segmentNames = registry.getSegmentNames();
			while (segmentNames.hasNext()) {
				String name = segmentNames.next (); 
				SegmentBuilder c = registry.getSegment (name);
				BuildWriter writer = new BuildWriter (javaOutputPath, name+".java");
				
				writer.println ("// Generated by the SegmentBuilder. Do not edit manually.");
				writer.println ();
				if (registry.getPackageName() != null) {
					writer.println("package "+registry.getPackageName()+";");
					writer.println();
				}
	
				writer.println("import com.vse.segments.*;");
				writer.println("import com.vse.types.*;");
				writer.println("");
	
				c.build(new BuildContext(registry, writer));
				writer.close();
	
				if (cppOutputPath != null) {
					BuildWriter cppW = new BuildWriter(cppOutputPath, "_"+name+".cpp");
					c.buildCpp(new BuildContext(registry, cppW));
					cppW.close();
				}
			}
	 
		} catch (Exception e) {
	        System.err.println(e);
	        throw(e);
	    }
	}

}

PARSER_END(SegmentDefinitionParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <SLAYER_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN :
{
  < UNION: "union" >
| < PACKAGE: "package" >
}

TOKEN :
{
  < ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9","_","-"] )* >
| < CLASS_NAME: <ID> ("." <ID>)* >
}

TOKEN :
{
  < NUMBER: (["1" - "9"] (["0" - "9"])*) | ("0") >

| < STRING:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

void run (ParseContext context) :
{
  Token packageName;
}
{
  [ 
    <PACKAGE> (packageName=<CLASS_NAME> | packageName=<ID>) ";" 
    {
      context.setPackageName (packageName.image);
    }
  ]

  ( 
    LOOKAHEAD(2) typeDefinition(context) |
    LOOKAHEAD(2) segmentDefinition(context)
  )* <EOF>
}

void typeDefinition (ParseContext context) :
{
  String name;
  Token className;
}
{
  name=id() "=" (className=<CLASS_NAME> | className=<ID>) ";"
  {
    context.registerType(name, className.image);
  }
}

void segmentDefinition(ParseContext context) :
{
  String name;
  SegmentBuilder segment;
}
{
  name=id() segment = segmentDefinitionBlock(context, name, null)
  {
    context.registerSegment (segment);
  }
}

SegmentBuilder segmentDefinitionBlock (ParseContext context, String name, String classAttributes) :
{
  String extendsName = null;
  SegmentBuilder segment;
}
{
  [ ":" extendsName=id() ] "{"
  {
    SegmentBuilder baseSegment = null;
    if (extendsName!=null)
      baseSegment = context.getSegment (extendsName);

    segment = new SegmentBuilder (name, baseSegment, classAttributes);
  } 

    (
      segmentFieldDefinition(context, segment)
    )*

  "}" { return segment; }  
}

void segmentFieldDefinition (ParseContext context, SegmentBuilder segment) :
{}
{
  LOOKAHEAD(2) simpleSegmentFieldDefinition (context, segment) |
  LOOKAHEAD(2) nestedSegmentDefinition (context, segment) |
  LOOKAHEAD(2) unionSegmentFieldDefinition (context, segment)
}

void simpleSegmentFieldDefinition (ParseContext context, SegmentBuilder segment) :
{
  String fieldName;
  String fieldType;
  long length;
  Map<String, ValueIdentifier> modifiers = new HashMap<String, ValueIdentifier>();
}
{
  fieldName=id() fieldType=id()
    [
      "(" length=number() ")"
      { 
        modifiers.put ("length", new ConstValueIdentifier(new Integer((int)length))); 
      }
    ]  

    (segmentFieldModifier(context, fieldType, modifiers))*

  ";"
  {
    segment.addField (fieldName, context.getType(fieldType), modifiers);
  }
}

void nestedSegmentDefinition (ParseContext context, SegmentBuilder segment) :
{
  String name;
  SegmentBuilder nestedSegment;
}
{
  name=id() nestedSegment=segmentDefinitionBlock(context,name,"static")
  {
    segment.addField (name, new NestedSubSegmentType(nestedSegment));
  }
}

void unionSegmentFieldDefinition (ParseContext context, SegmentBuilder segment) :
{
  String name; 
  UnionSegmentBuilder union;
  Map<String, ValueIdentifier> modifiers = new HashMap<String, ValueIdentifier>();
}
{
  <UNION> name=id() 
  {
    union = new UnionSegmentBuilder (name, name);
  }

    (segmentFieldModifier(context, "-UNION-", modifiers))*

  "{"
    (
      segmentFieldDefinition(context, union)
    )*
  "}"
  {
    segment.addField (name, new UnionSubSegmentType(union), modifiers);
  }  
}

void segmentFieldModifier(ParseContext context, String currentType, Map<String, ValueIdentifier> values) :
{
  String modifierName;
  ValueIdentifier modifierValue;
}
{
  modifierName=id() "=" modifierValue=value(context, currentType, modifierName)
  {
    values.put (modifierName, modifierValue);
  } 
}


ValueIdentifier value (ParseContext context, String currentType, String modifierName) :
{
  long n;
  String s;
}
{
  n=number() 
  {
    return new ConstValueIdentifier (
      (n<Integer.MAX_VALUE && n>Integer.MIN_VALUE) ? 
        (Number)new Integer ((int)n) :
        (Number)new Long (n) );
  }
 
  | s=string()
  {
    return new ConstValueIdentifier (s);
  }

  | <ID>
  { 
    ValueIdentifier id = context.resolveIdentifierFor(currentType, modifierName, token.image);
    if (id == null)
      throw new ParseException("Invalid value token: "+token.image);

    return id;
  } 
}

String string () :
{}
{
  <STRING>
  {
    return token.image.substring (1, token.image.length()-1);
  } 
}

long number () :
{}
{
  <NUMBER>
  {
    try {
      return Long.parseLong (token.image);
    } catch (NumberFormatException exc)
      { return 0; }
  } 
}

String id () :
{}
{
  <ID>
  {
    return token.image;
  } 
}
